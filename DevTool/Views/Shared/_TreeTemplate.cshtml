<!-- Category Tree template -->
<script type="text/x-template" id="treeNode-template">
    <li>
        <div v-bind:class="{'bold': isFolder,'selected':nodemodel.Selected}"
             v-on:click="click">
            #{{nodemodel.Id + " " + nodemodel.Name }}
            <span v-if="isFolder" v-on:click.stop="toggle">[{{open ? '-' : '+'}}]</span>
        </div>
        <ul v-show="open" v-if="isFolder">
            <treeNode v-bind:class="item"
                      v-for="model1 in nodemodel.Children"
                      v-bind:nodemodel="model1">
            </treeNode>
        </ul>
    </li>
</script>
 
<script type="text/x-template" id="tree-template">
    <ul>
        <treenode class="item" v-bind:nodemodel="model" >
        </treenode>
    </ul>
</script>

<script>


    // define the tree component
    Vue.component('treenode', {
        template: '#treeNode-template',
        props: {
            nodemodel: Object 
        },
        data: function () {
            return {
                open: true
            }
        },
        computed: {
            isFolder: function () {
                return this.nodemodel.Children &&
                  this.nodemodel.Children.length
            }
        },
        methods: {
            click: function () { 
                this.$dispatch('select', this.nodemodel); 
            },
            toggle: function () {
                if (this.isFolder) {
                    this.open = !this.open
                }
                return false;
            } 
        }
    })

    Vue.component('tree', {
        template: "#tree-template",
        props: {
            model: Object 
        },
        data:function(){
            SelectedNode:null
        },
        methods: { 
            addChild: function (id,name,entity) {
                var childNode = {
                    Id: id,
                    Name: name,
                    Entity: entity,
                    Selected:false
                };
                this.SelectedNode.Children.push(childNode);
            }
        },
        events: {
            select: function (node) {
                if (this.SelectedNode != null)
                    this.SelectedNode.Selected = false;
                node.Selected = true;
                this.SelectedNode = node; 
            }
        }
    })
</script>