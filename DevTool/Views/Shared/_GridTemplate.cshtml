
<!-- grid  template -->
<script type="text/x-template" id="grid-template">
    <table class="grid">
        <thead>
            <tr>
                <td v-for="key in columns"
                    v-on:click="sortBy(key)"
                    v-bind:class="{active: sortKey == key}">
                    {{key.FieldLabel | capitalize}}
                    <span class="arrow"
                          v-bind:class="sortOrders[key] > 0 ? 'asc' : 'dsc'">
                    </span>
                </td>
                <td></td>
            </tr>
        </thead>
        <tbody>
            <tr v-for="
                entry in data
                | filterBy filterKey
                | orderBy sortKey sortOrders[sortKey]">
                <td v-for="key in columns" v-bind:style="{'text-align':key.Align?key.Align:'center'}">
                    {{entry[key.FieldName]}}  
                </td>
                <td>
                    <a v-if="showSelect" href="javascript:void(0);" v-on:click="selectClick($index,entry)">Select</a>
                    <a v-if="showDelete" href="javascript:void(0);" v-on:click="deleteClick($index,entry)">Delete</a>
                </td>
            </tr>
        </tbody>
    </table>
</script>

<script>
    // register the grid component
    $(function () {
        Vue.component('grid', {
            template: '#grid-template',
            props: {
                data: Array,
                columns: Array,
                filterKey: String,
                keyName: String
            },
            computed: {
                showDelete: function () { 
                    return this._events.ondelete && true;
                },
                showSelect: function () {
                    return this._events.onselect && true;
                }
            },
            data: function () {
                var sortOrders = {}
                $.each(this.columns, function (index, item) {
                    sortOrders[item] = 1;
                });

                return {
                    sortKey: '',
                    sortOrders: sortOrders
                }
            },
            methods: {
                selectClick: function (index, entity) {
                    this.$dispatch('onselect', index, entity);

                    var $win = $(this.$el).closest(".js-window");
                    if ($win.size() > 0) {
                        var callback = $(this.$el).closest(".js-window")[0]._popCallback;
                        callback("select", entity);
                    }
                },
                deleteClick: function (index, entity) {
                    this.$dispatch('ondelete', index, entity);

                    var $win = $(this.$el).closest(".js-window");
                    if ($win.size() > 0) {
                        var callback = $(this.$el).closest(".js-window")[0]._popCallback;
                        callback("delete", entity);
                    }
                },
                sortBy: function (key) {
                    this.sortKey = key;
                    this.sortOrders[key] = this.sortOrders[key] * -1
                }
            },
            events: { 
            }
        })
    });

</script>